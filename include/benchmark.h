#ifndef BENCHMARK_H
#define BENCHMARK_H

//
// WARNING: This header was generated by AI
//

#ifdef ENABLE_BENCHMARK
#    ifdef _WIN32
#        include <windows.h>
typedef LARGE_INTEGER benchmark_time_t;
static inline benchmark_time_t
benchmark_now( void )
{
    LARGE_INTEGER t;
    QueryPerformanceCounter( &t );
    return t;
}
static inline double
benchmark_elapsed_ms( benchmark_time_t start, benchmark_time_t end )
{
    LARGE_INTEGER freq;
    QueryPerformanceFrequency( &freq );
    return ( (double)( end.QuadPart - start.QuadPart ) * 1000.0 ) / freq.QuadPart;
}
#    else
#        include <stdio.h>
#        include <time.h>
typedef struct timespec benchmark_time_t;
static inline benchmark_time_t
benchmark_now( void )
{
    struct timespec t;
    clock_gettime( CLOCK_MONOTONIC, &t );
    return t;
}
static inline double
benchmark_elapsed_ms( benchmark_time_t start, benchmark_time_t end )
{
    return ( (double)( end.tv_sec - start.tv_sec ) * 1000.0 ) + ( (double)( end.tv_nsec - start.tv_nsec ) / 1000000.0 );
}
#    endif

#    define BENCHMARK_START() benchmark_time_t _bench_start = benchmark_now()
#    define BENCHMARK_END_PRINT( name )                                                                                \
        do                                                                                                             \
            {                                                                                                          \
                benchmark_time_t _bench_end = benchmark_now();                                                         \
                printf( "%s: %.3f ms\n", name, benchmark_elapsed_ms( _bench_start, _bench_end ) );                     \
            }                                                                                                          \
        while( 0 )

#else
// Ensure benchmarking macros
#    define BENCHMARK_START()           ( (void)( 0 ) )
#    define BENCHMARK_END_PRINT( name ) ( (void)( 0 ) )
#endif // ENABLE_BENCHMARK

#endif // BENCHMARK_H
